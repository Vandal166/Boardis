services:
  web.api:
    image: web.api
    container_name: web.api
    build:
      context: .
      dockerfile: src/Web.API/Dockerfile
    ports:
      - "5185:5185"
    depends_on:
        web.database:
          condition: service_healthy
        redis:
            condition: service_started
        azurite:
          condition: service_started
    environment:
      - ASPNETCORE_URLS=http://+:5185 # Listen on port 5185
      - ASPNETCORE_ENVIRONMENT=Development # running in Development mode
      - ConnectionStrings__Boardis_DB=Host=web.database;Port=5432;Database=Boardis_DB;Username=postgres;Password=postgres
      - ConnectionStrings__Redis=redis:6379
    networks:
      - boardis-network
            
  ## Redis service for distributed caching ##
  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379" # Expose Redis port for local access if needed (e.g., for debugging)
    networks:
      - boardis-network

## Database of main web app ##
  web.database:
    image: postgres:latest
    container_name: web.database
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: Boardis_DB
    volumes:
      - ./.containers/boardis_db:/var/lib/postgresql/data
    ports:
        - "5433:5432"
    healthcheck: # ensuring PostgreSQL is ready before Keycloak starts
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - boardis-network
    
## Database of keycloak ##
  keycloak.database:
    image: postgres:latest
    container_name: keycloak.database
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: keycloak
    volumes:
      - ./.containers/keycloak_db:/var/lib/postgresql/data
    ports:
      - "5434:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - boardis-network
        
  web.keycloak:
    image: quay.io/keycloak/keycloak:26.3.3
    container_name: web.keycloak
    environment:
      KC_BOOTSTRAP_ADMIN_USERNAME: admin
      KC_BOOTSTRAP_ADMIN_PASSWORD: admin
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://keycloak.database:5432/keycloak
      KC_DB_USERNAME: postgres
      KC_DB_PASSWORD: postgres
      KC_HOSTNAME_STRICT: "false"
      KC_HOSTNAME_STRICT_BACKCHANNEL: "false"
      KC_PROXY: edge # enabled proxy mode (handles X-Forwarded headers)
      KC_HTTP_ENABLED: "true"
      KC_HTTP_PORT: 8081
      KC_HTTP_RELATIVE_PATH: /auth
    ports:
      - "8081:8081"
    depends_on:
      keycloak.database:
        condition: service_healthy # wait for PostgreSQL to be healthy
    command: start-dev
    volumes:
      - ./keycloak/theme/keycloak-theme-for-kc-22-to-25.jar:/opt/keycloak/providers/keycloak-theme-for-kc-22-to-25.jar # mounting custom theme
    networks:
      - boardis-network
        
  web.nginx:
    image: nginx:alpine
    container_name: web.nginx
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./frontend/dist:/usr/share/nginx/html:ro  # Mount built frontend (build it first with npm run build)
    ports:
      - "80:80"  # Access app at http://localhost
    depends_on:
      - web.api
      - web.keycloak
    networks:
      - boardis-network
        
        
  azurite:
    image: mcr.microsoft.com/azure-storage/azurite
    container_name: azurite
    ports:
        - "10000:10000" # Blob service
    volumes:
        - ./.containers/azurite:/data
    networks:
      - boardis-network
    
  
networks:
  boardis-network:
    driver: bridge # allows inter-container communication